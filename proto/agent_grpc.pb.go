// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: proto/agent.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameServerManagerClient is the client API for GameServerManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameServerManagerClient interface {
	// Starts a game server
	StartServer(ctx context.Context, in *ServerRequest, opts ...grpc.CallOption) (*ServerResponse, error)
	// Stops a game server
	StopServer(ctx context.Context, in *ServerRequest, opts ...grpc.CallOption) (*ServerResponse, error)
	// Checks if the agent is alive and responsive
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error)
}

type gameServerManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServerManagerClient(cc grpc.ClientConnInterface) GameServerManagerClient {
	return &gameServerManagerClient{cc}
}

func (c *gameServerManagerClient) StartServer(ctx context.Context, in *ServerRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, "/snivur.v0.GameServerManager/StartServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerManagerClient) StopServer(ctx context.Context, in *ServerRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, "/snivur.v0.GameServerManager/StopServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerManagerClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/snivur.v0.GameServerManager/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerManagerClient) ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error) {
	out := new(ListServersResponse)
	err := c.cc.Invoke(ctx, "/snivur.v0.GameServerManager/ListServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServerManagerServer is the server API for GameServerManager service.
// All implementations must embed UnimplementedGameServerManagerServer
// for forward compatibility
type GameServerManagerServer interface {
	// Starts a game server
	StartServer(context.Context, *ServerRequest) (*ServerResponse, error)
	// Stops a game server
	StopServer(context.Context, *ServerRequest) (*ServerResponse, error)
	// Checks if the agent is alive and responsive
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error)
	mustEmbedUnimplementedGameServerManagerServer()
}

// UnimplementedGameServerManagerServer must be embedded to have forward compatible implementations.
type UnimplementedGameServerManagerServer struct {
}

func (UnimplementedGameServerManagerServer) StartServer(context.Context, *ServerRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartServer not implemented")
}
func (UnimplementedGameServerManagerServer) StopServer(context.Context, *ServerRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopServer not implemented")
}
func (UnimplementedGameServerManagerServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedGameServerManagerServer) ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServers not implemented")
}
func (UnimplementedGameServerManagerServer) mustEmbedUnimplementedGameServerManagerServer() {}

// UnsafeGameServerManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServerManagerServer will
// result in compilation errors.
type UnsafeGameServerManagerServer interface {
	mustEmbedUnimplementedGameServerManagerServer()
}

func RegisterGameServerManagerServer(s grpc.ServiceRegistrar, srv GameServerManagerServer) {
	s.RegisterService(&GameServerManager_ServiceDesc, srv)
}

func _GameServerManager_StartServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerManagerServer).StartServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snivur.v0.GameServerManager/StartServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerManagerServer).StartServer(ctx, req.(*ServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerManager_StopServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerManagerServer).StopServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snivur.v0.GameServerManager/StopServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerManagerServer).StopServer(ctx, req.(*ServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerManager_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerManagerServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snivur.v0.GameServerManager/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerManagerServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerManager_ListServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerManagerServer).ListServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snivur.v0.GameServerManager/ListServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerManagerServer).ListServers(ctx, req.(*ListServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameServerManager_ServiceDesc is the grpc.ServiceDesc for GameServerManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameServerManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snivur.v0.GameServerManager",
	HandlerType: (*GameServerManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartServer",
			Handler:    _GameServerManager_StartServer_Handler,
		},
		{
			MethodName: "StopServer",
			Handler:    _GameServerManager_StopServer_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _GameServerManager_HealthCheck_Handler,
		},
		{
			MethodName: "ListServers",
			Handler:    _GameServerManager_ListServers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/agent.proto",
}
